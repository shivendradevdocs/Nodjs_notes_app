pipeline {
    agent {label "ci-agent"}


    environment {
      NETWORK_NAME   = "notes-net"
      MONGO_CONTAINER= "notes-mongo"
      MONGO_IMAGE    = "mongo:6"
      MONGO_VOLUME   = "notes_mongo_data"
      APP_CONTAINER  = "notes-app"
      // APP_IMAGE      = "node-notes-app:${GIT_COMMIT.take(8)}"
      APP_IMAGE      = "node-notes-app:latest"
      APP_PORT       = "3000"
      CONTAINER_PORT = "8000"
      BUILD_CONTEXT  = "."
      MONGO_TIMEOUT  = "60"
  }

    stages {
        stage('Fetch') {
            steps {
                echo 'Fetching the repo'
                sh 'whoami'
                git branch: 'main', url: 'https://github.com/shivendradevdocs/Nodjs_notes_app.git'
            }
        }
        stage('Build') {
            steps {
                // echo 'Fetching the repo'
                // sh 'docker build -t ${APP_IMAGE} ${BUILD_CONTEXT}'
              script {
              sh """
                
                echo "Building app image ${APP_IMAGE}..."
                docker build -t ${APP_IMAGE} ${BUILD_CONTEXT}
              """
              }
                
            }
        }
        stage('Test') {
            steps {
                echo 'Test'

            }
        }
        stage('Ensure network & mongo') {
          steps {
            script {
              sh '''
                echo "=> Ensure network exists"
                if ! docker network ls --format '{{.Name}}' | grep -xq "${NETWORK_NAME}"; then
                  docker network create "${NETWORK_NAME}"
                else
                  echo "Network ${NETWORK_NAME} exists"
                fi

                # ensure mongo container exists and running
                if docker inspect "${MONGO_CONTAINER}" >/dev/null 2>&1; then
                  status=$(docker inspect -f '{{.State.Status}}' "${MONGO_CONTAINER}")
                  echo "Mongo container ${MONGO_CONTAINER} status: ${status}"
                  if [ "$status" != "running" ]; then
                    docker start "${MONGO_CONTAINER}"
                  fi
                else
                  docker run -d --name "${MONGO_CONTAINER}" \
                    --network "${NETWORK_NAME}" \
                    -v "${MONGO_VOLUME}:/data/db" \
                    ${MONGO_IMAGE}
                fi
              '''
            }
          }
        }

        stage('Wait for Mongo') {
          steps {
            script {
              sh '''
                echo "Waiting for Mongo to be ready..."
                start_ts=$(date +%s)
                while true; do
                  if docker exec "${MONGO_CONTAINER}" mongo --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
                    echo "Mongo ready"
                    break
                  fi
                  if [ $(( $(date +%s) - start_ts )) -gt ${MONGO_TIMEOUT} ]; then
                    echo "Mongo did not become ready in ${MONGO_TIMEOUT}s"
                    docker logs --tail 200 "${MONGO_CONTAINER}" || true
                    exit 1
                  fi
                  sleep 2
                done
              '''
            }
          }
        }

        stage('Deploy app') {
          steps {
            script {
              sh '''
                # stop & remove existing app container if it exists
                if docker inspect "${APP_CONTAINER}" >/dev/null 2>&1; then
                  echo "Removing existing app container ${APP_CONTAINER}"
                  docker rm -f "${APP_CONTAINER}"
                fi

                # start new container
                echo "Starting app container ${APP_CONTAINER}"
                docker run -d \
                  --name "${APP_CONTAINER}" \
                  --network "${NETWORK_NAME}" \
                  -p "${APP_PORT}:${CONTAINER_PORT}" \
                  -e "MONGODB_URI=mongodb://${MONGO_CONTAINER}:27017/notesdb" \
                  ${APP_IMAGE}
              '''
            }
        }
      }
    }
}
